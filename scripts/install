#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
admin=$YNH_APP_ARG_ADMIN
email=$(ynh_user_get_info --username=$admin --key=mail)
random_string=$(ynh_string_random --length=64)
timezone="$(cat /etc/timezone)"

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..."

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..."

ynh_app_setting_set --app=$app --key=domain   --value=$domain
ynh_app_setting_set --app=$app --key=path     --value=$path_url
ynh_app_setting_set --app=$app --key=admin    --value=$admin
ynh_app_setting_set --app=$app --key=email    --value=$email
ynh_app_setting_set --app=$app --key=random_string --value=$random_string

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..."

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# 1 - Hubzilla
ynh_script_progression --message="Setting up Hubzilla source files..."

git clone --quiet https://framagit.org/hubzilla/core.git "$final_path"

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
# ynh_setup_source --dest_dir="$final_path"

# 2 - Hubzilla Addons

# Make addon Directory and unpack the Hubzilla addons to this directory
ynh_script_progression --message="Create addon directory inside Hubzilla root folder..."
# mkdir $final_path/addon
# ynh_script_progression --message="Setting up Hubzilla addons source files..."

# ynh_setup_source --dest_dir="$final_path/addon" --source_id="app_addons"

pushd "$final_path"
	mkdir -p extend/addon/hzaddons
	mkdir addon
	git clone --quiet https://framagit.org/hubzilla/addons.git $final_path/extend/addon/hzaddons
	filelist=(`ls extend/addon/hzaddons`)
	cd addon
	for a in "${filelist[@]}" ; do
		base=`basename $a`
		if [ $base = '.git' ]; then
			#echo 'ignoring git'
			continue;
		fi
		if [ ! -d ../extend/addon/hzaddons/$base ]; then
			#echo $a 'not a directory'
			continue;
		fi
		if [ -x $base ]; then
			#echo $base 'file exists'
			continue;
		fi

		echo linking $base

		ln -s ../extend/addon/hzaddons/$base $base
	done

popd

# 3 - Some extra folders
ynh_script_progression --message="Creating smarty3 folder for personal data..."

mkdir -p "${final_path}/store/[data]/smarty3"
chmod -R 775 $final_path/store

# Copy the template install/htconfig.sample.php to .htconfig.php
#ynh_script_progression --message="Moving .htconfig.php to root of Hubzilla ..."

#config="$final_path/.htconfig.php"
#cp $final_path/install/htconfig.sample.php $config

# Create php.log inside Hubzilla for logs
ynh_script_progression --message="Create php.log for the Hubzilla debuging..."
touch "$final_path/php.log"

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# CREATE A MYSQL DATABASE
#=================================================
ynh_script_progression --message="Creating a MySQL database..." --weight=1

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_mysql_setup_db --db_user=$db_user --db_name=$db_name
ynh_mysql_connect_as --user="$db_user" --password="$db_pwd" --database="$db_name" < $final_path/install/schema_mysql.sql

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=1

ynh_add_config --template="../conf/htconfig.sample.php" --destination="$final_path/.htconfig.php"

chmod 400 "$final_path/some_config_file"
chown $app:$app "$final_path/some_config_file"


# addon ldap config
#ynh_script_progression --message="Push LDAP configuration to .htconfig.php..."

#cat ../conf/ldap_conf.php >> $final_path/.htconfig.php

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..."

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring PHP-FPM..."

# Create a dedicated PHP-FPM config
ynh_add_fpm_config
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# CRON CONFIGURATION
#=================================================
ynh_script_progression --message="Set up cron job..."

ynh_add_config --template="../conf/cron" --destination="/etc/cron.d/$app"
chown root: "/etc/cron.d/$app"
chmod 644 "/etc/cron.d/$app"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..."

# Use logrotate to manage application logfile(s)
ynh_use_logrotate "$final_path/php.log"

#=================================================
# SETUP FAIL2BAN
#=================================================
ynh_script_progression --message="Add Fail2Ban..."

ynh_add_fail2ban_config --logpath="$final_path/php.log" --failregex="^.*auth\.php.*failed login attempt.*from IP <HOST>.*$" --max_retry="5"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed"
